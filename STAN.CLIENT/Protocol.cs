// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace STAN.Client {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxILU1RBTi5DbGllbnQiZgoGUHViTXNnEhAKCGNs",
            "aWVudElEGAEgASgJEgwKBGd1aWQYAiABKAkSDwoHc3ViamVjdBgDIAEoCRIN",
            "CgVyZXBseRgEIAEoCRIMCgRkYXRhGAUgASgMEg4KBnNoYTI1NhgKIAEoDCIl",
            "CgZQdWJBY2sSDAoEZ3VpZBgBIAEoCRINCgVlcnJvchgCIAEoCSKBAQoITXNn",
            "UHJvdG8SEAoIc2VxdWVuY2UYASABKAQSDwoHc3ViamVjdBgCIAEoCRINCgVy",
            "ZXBseRgDIAEoCRIMCgRkYXRhGAQgASgMEhEKCXRpbWVzdGFtcBgFIAEoAxIT",
            "CgtyZWRlbGl2ZXJlZBgGIAEoCBINCgVDUkMzMhgKIAEoDSIoCgNBY2sSDwoH",
            "c3ViamVjdBgBIAEoCRIQCghzZXF1ZW5jZRgCIAEoBCI6Cg5Db25uZWN0UmVx",
            "dWVzdBIQCghjbGllbnRJRBgBIAEoCRIWCg5oZWFydGJlYXRJbmJveBgCIAEo",
            "CSKjAQoPQ29ubmVjdFJlc3BvbnNlEhEKCXB1YlByZWZpeBgBIAEoCRITCgtz",
            "dWJSZXF1ZXN0cxgCIAEoCRIVCg11bnN1YlJlcXVlc3RzGAMgASgJEhUKDWNs",
            "b3NlUmVxdWVzdHMYBCABKAkSDQoFZXJyb3IYBSABKAkSGAoQc3ViQ2xvc2VS",
            "ZXF1ZXN0cxgGIAEoCRIRCglwdWJsaWNLZXkYZCABKAki+gEKE1N1YnNjcmlw",
            "dGlvblJlcXVlc3QSEAoIY2xpZW50SUQYASABKAkSDwoHc3ViamVjdBgCIAEo",
            "CRIOCgZxR3JvdXAYAyABKAkSDQoFaW5ib3gYBCABKAkSEwoLbWF4SW5GbGln",
            "aHQYBSABKAUSFQoNYWNrV2FpdEluU2VjcxgGIAEoBRITCgtkdXJhYmxlTmFt",
            "ZRgHIAEoCRIxCg1zdGFydFBvc2l0aW9uGAogASgOMhouU1RBTi5DbGllbnQu",
            "U3RhcnRQb3NpdGlvbhIVCg1zdGFydFNlcXVlbmNlGAsgASgEEhYKDnN0YXJ0",
            "VGltZURlbHRhGAwgASgDIjcKFFN1YnNjcmlwdGlvblJlc3BvbnNlEhAKCGFj",
            "a0luYm94GAIgASgJEg0KBWVycm9yGAMgASgJIlsKElVuc3Vic2NyaWJlUmVx",
            "dWVzdBIQCghjbGllbnRJRBgBIAEoCRIPCgdzdWJqZWN0GAIgASgJEg0KBWlu",
            "Ym94GAMgASgJEhMKC2R1cmFibGVOYW1lGAQgASgJIiAKDENsb3NlUmVxdWVz",
            "dBIQCghjbGllbnRJRBgBIAEoCSIeCg1DbG9zZVJlc3BvbnNlEg0KBWVycm9y",
            "GAEgASgJKmAKDVN0YXJ0UG9zaXRpb24SCwoHTmV3T25seRAAEhAKDExhc3RS",
            "ZWNlaXZlZBABEhIKDlRpbWVEZWx0YVN0YXJ0EAISEQoNU2VxdWVuY2VTdGFy",
            "dBADEgkKBUZpcnN0EARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::STAN.Client.StartPosition), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.PubMsg), global::STAN.Client.PubMsg.Parser, new[]{ "ClientID", "Guid", "Subject", "Reply", "Data", "Sha256" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.PubAck), global::STAN.Client.PubAck.Parser, new[]{ "Guid", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.MsgProto), global::STAN.Client.MsgProto.Parser, new[]{ "Sequence", "Subject", "Reply", "Data", "Timestamp", "Redelivered", "CRC32" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.Ack), global::STAN.Client.Ack.Parser, new[]{ "Subject", "Sequence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.ConnectRequest), global::STAN.Client.ConnectRequest.Parser, new[]{ "ClientID", "HeartbeatInbox" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.ConnectResponse), global::STAN.Client.ConnectResponse.Parser, new[]{ "PubPrefix", "SubRequests", "UnsubRequests", "CloseRequests", "Error", "SubCloseRequests", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.SubscriptionRequest), global::STAN.Client.SubscriptionRequest.Parser, new[]{ "ClientID", "Subject", "QGroup", "Inbox", "MaxInFlight", "AckWaitInSecs", "DurableName", "StartPosition", "StartSequence", "StartTimeDelta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.SubscriptionResponse), global::STAN.Client.SubscriptionResponse.Parser, new[]{ "AckInbox", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.UnsubscribeRequest), global::STAN.Client.UnsubscribeRequest.Parser, new[]{ "ClientID", "Subject", "Inbox", "DurableName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.CloseRequest), global::STAN.Client.CloseRequest.Parser, new[]{ "ClientID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::STAN.Client.CloseResponse), global::STAN.Client.CloseResponse.Parser, new[]{ "Error" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Enum for start position type.
  /// </summary>
  public enum StartPosition {
    [pbr::OriginalName("NewOnly")] NewOnly = 0,
    [pbr::OriginalName("LastReceived")] LastReceived = 1,
    [pbr::OriginalName("TimeDeltaStart")] TimeDeltaStart = 2,
    [pbr::OriginalName("SequenceStart")] SequenceStart = 3,
    [pbr::OriginalName("First")] First = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// How messages are delivered to the STAN cluster
  /// </summary>
  public sealed partial class PubMsg : pb::IMessage<PubMsg> {
    private static readonly pb::MessageParser<PubMsg> _parser = new pb::MessageParser<PubMsg>(() => new PubMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PubMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubMsg(PubMsg other) : this() {
      clientID_ = other.clientID_;
      guid_ = other.guid_;
      subject_ = other.subject_;
      reply_ = other.reply_;
      data_ = other.data_;
      sha256_ = other.sha256_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubMsg Clone() {
      return new PubMsg(this);
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 1;
    private string clientID_ = "";
    /// <summary>
    /// ClientID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private string guid_ = "";
    /// <summary>
    /// guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 3;
    private string subject_ = "";
    /// <summary>
    /// subject
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reply" field.</summary>
    public const int ReplyFieldNumber = 4;
    private string reply_ = "";
    /// <summary>
    /// optional reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reply {
      get { return reply_; }
      set {
        reply_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sha256" field.</summary>
    public const int Sha256FieldNumber = 10;
    private pb::ByteString sha256_ = pb::ByteString.Empty;
    /// <summary>
    /// optional sha256 of data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sha256 {
      get { return sha256_; }
      set {
        sha256_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PubMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PubMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientID != other.ClientID) return false;
      if (Guid != other.Guid) return false;
      if (Subject != other.Subject) return false;
      if (Reply != other.Reply) return false;
      if (Data != other.Data) return false;
      if (Sha256 != other.Sha256) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientID.Length != 0) hash ^= ClientID.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Reply.Length != 0) hash ^= Reply.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Sha256.Length != 0) hash ^= Sha256.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientID);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Guid);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Subject);
      }
      if (Reply.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reply);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
      if (Sha256.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Sha256);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Reply.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reply);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Sha256.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sha256);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PubMsg other) {
      if (other == null) {
        return;
      }
      if (other.ClientID.Length != 0) {
        ClientID = other.ClientID;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Reply.Length != 0) {
        Reply = other.Reply;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Sha256.Length != 0) {
        Sha256 = other.Sha256;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientID = input.ReadString();
            break;
          }
          case 18: {
            Guid = input.ReadString();
            break;
          }
          case 26: {
            Subject = input.ReadString();
            break;
          }
          case 34: {
            Reply = input.ReadString();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
          case 82: {
            Sha256 = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Used to ACK to publishers
  /// </summary>
  public sealed partial class PubAck : pb::IMessage<PubAck> {
    private static readonly pb::MessageParser<PubAck> _parser = new pb::MessageParser<PubAck>(() => new PubAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PubAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubAck(PubAck other) : this() {
      guid_ = other.guid_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PubAck Clone() {
      return new PubAck(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    /// <summary>
    /// guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    /// <summary>
    /// err string, empty/omitted if no error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PubAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PubAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PubAck other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Msg struct. Sequence is assigned for global ordering by
  /// the cluster after the publisher has been acknowledged.
  /// </summary>
  public sealed partial class MsgProto : pb::IMessage<MsgProto> {
    private static readonly pb::MessageParser<MsgProto> _parser = new pb::MessageParser<MsgProto>(() => new MsgProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgProto(MsgProto other) : this() {
      sequence_ = other.sequence_;
      subject_ = other.subject_;
      reply_ = other.reply_;
      data_ = other.data_;
      timestamp_ = other.timestamp_;
      redelivered_ = other.redelivered_;
      cRC32_ = other.cRC32_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgProto Clone() {
      return new MsgProto(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private ulong sequence_;
    /// <summary>
    /// globally ordered sequence number for the subject's channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 2;
    private string subject_ = "";
    /// <summary>
    /// subject
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reply" field.</summary>
    public const int ReplyFieldNumber = 3;
    private string reply_ = "";
    /// <summary>
    /// optional reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reply {
      get { return reply_; }
      set {
        reply_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private long timestamp_;
    /// <summary>
    /// received timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "redelivered" field.</summary>
    public const int RedeliveredFieldNumber = 6;
    private bool redelivered_;
    /// <summary>
    /// Flag specifying if the message is being redelivered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Redelivered {
      get { return redelivered_; }
      set {
        redelivered_ = value;
      }
    }

    /// <summary>Field number for the "CRC32" field.</summary>
    public const int CRC32FieldNumber = 10;
    private uint cRC32_;
    /// <summary>
    /// optional IEEE CRC32
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CRC32 {
      get { return cRC32_; }
      set {
        cRC32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (Subject != other.Subject) return false;
      if (Reply != other.Reply) return false;
      if (Data != other.Data) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Redelivered != other.Redelivered) return false;
      if (CRC32 != other.CRC32) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0UL) hash ^= Sequence.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Reply.Length != 0) hash ^= Reply.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Redelivered != false) hash ^= Redelivered.GetHashCode();
      if (CRC32 != 0) hash ^= CRC32.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Sequence);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (Reply.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reply);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Timestamp);
      }
      if (Redelivered != false) {
        output.WriteRawTag(48);
        output.WriteBool(Redelivered);
      }
      if (CRC32 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CRC32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sequence);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Reply.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reply);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Redelivered != false) {
        size += 1 + 1;
      }
      if (CRC32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CRC32);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgProto other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0UL) {
        Sequence = other.Sequence;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Reply.Length != 0) {
        Reply = other.Reply;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Redelivered != false) {
        Redelivered = other.Redelivered;
      }
      if (other.CRC32 != 0) {
        CRC32 = other.CRC32;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadUInt64();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            Reply = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 40: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 48: {
            Redelivered = input.ReadBool();
            break;
          }
          case 80: {
            CRC32 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Ack will deliver an ack for a delivered msg.
  /// </summary>
  public sealed partial class Ack : pb::IMessage<Ack> {
    private static readonly pb::MessageParser<Ack> _parser = new pb::MessageParser<Ack>(() => new Ack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack(Ack other) : this() {
      subject_ = other.subject_;
      sequence_ = other.sequence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack Clone() {
      return new Ack(this);
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 1;
    private string subject_ = "";
    /// <summary>
    /// Subject
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private ulong sequence_;
    /// <summary>
    /// Sequence to acknowledge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Subject != other.Subject) return false;
      if (Sequence != other.Sequence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Sequence != 0UL) hash ^= Sequence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Subject.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Subject);
      }
      if (Sequence != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Sequence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Sequence != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sequence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ack other) {
      if (other == null) {
        return;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Sequence != 0UL) {
        Sequence = other.Sequence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Subject = input.ReadString();
            break;
          }
          case 16: {
            Sequence = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Connection Request
  /// </summary>
  public sealed partial class ConnectRequest : pb::IMessage<ConnectRequest> {
    private static readonly pb::MessageParser<ConnectRequest> _parser = new pb::MessageParser<ConnectRequest>(() => new ConnectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest(ConnectRequest other) : this() {
      clientID_ = other.clientID_;
      heartbeatInbox_ = other.heartbeatInbox_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest Clone() {
      return new ConnectRequest(this);
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 1;
    private string clientID_ = "";
    /// <summary>
    /// Client name/identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heartbeatInbox" field.</summary>
    public const int HeartbeatInboxFieldNumber = 2;
    private string heartbeatInbox_ = "";
    /// <summary>
    /// Inbox for server initiated heartbeats.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeartbeatInbox {
      get { return heartbeatInbox_; }
      set {
        heartbeatInbox_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientID != other.ClientID) return false;
      if (HeartbeatInbox != other.HeartbeatInbox) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientID.Length != 0) hash ^= ClientID.GetHashCode();
      if (HeartbeatInbox.Length != 0) hash ^= HeartbeatInbox.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientID);
      }
      if (HeartbeatInbox.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HeartbeatInbox);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (HeartbeatInbox.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeartbeatInbox);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientID.Length != 0) {
        ClientID = other.ClientID;
      }
      if (other.HeartbeatInbox.Length != 0) {
        HeartbeatInbox = other.HeartbeatInbox;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientID = input.ReadString();
            break;
          }
          case 18: {
            HeartbeatInbox = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response to a client connect
  /// </summary>
  public sealed partial class ConnectResponse : pb::IMessage<ConnectResponse> {
    private static readonly pb::MessageParser<ConnectResponse> _parser = new pb::MessageParser<ConnectResponse>(() => new ConnectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse(ConnectResponse other) : this() {
      pubPrefix_ = other.pubPrefix_;
      subRequests_ = other.subRequests_;
      unsubRequests_ = other.unsubRequests_;
      closeRequests_ = other.closeRequests_;
      error_ = other.error_;
      subCloseRequests_ = other.subCloseRequests_;
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse Clone() {
      return new ConnectResponse(this);
    }

    /// <summary>Field number for the "pubPrefix" field.</summary>
    public const int PubPrefixFieldNumber = 1;
    private string pubPrefix_ = "";
    /// <summary>
    /// Prefix to use when publishing to this STAN cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubPrefix {
      get { return pubPrefix_; }
      set {
        pubPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subRequests" field.</summary>
    public const int SubRequestsFieldNumber = 2;
    private string subRequests_ = "";
    /// <summary>
    /// Subject to use for subscription requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubRequests {
      get { return subRequests_; }
      set {
        subRequests_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unsubRequests" field.</summary>
    public const int UnsubRequestsFieldNumber = 3;
    private string unsubRequests_ = "";
    /// <summary>
    /// Subject to use for unsubscribe requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnsubRequests {
      get { return unsubRequests_; }
      set {
        unsubRequests_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "closeRequests" field.</summary>
    public const int CloseRequestsFieldNumber = 4;
    private string closeRequests_ = "";
    /// <summary>
    /// Subject for closing the stan connection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseRequests {
      get { return closeRequests_; }
      set {
        closeRequests_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 5;
    private string error_ = "";
    /// <summary>
    /// err string, empty/omitted if no error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subCloseRequests" field.</summary>
    public const int SubCloseRequestsFieldNumber = 6;
    private string subCloseRequests_ = "";
    /// <summary>
    /// Subject to use for subscription close requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubCloseRequests {
      get { return subCloseRequests_; }
      set {
        subCloseRequests_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 100;
    private string publicKey_ = "";
    /// <summary>
    /// Possibly used to sign acks, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubPrefix != other.PubPrefix) return false;
      if (SubRequests != other.SubRequests) return false;
      if (UnsubRequests != other.UnsubRequests) return false;
      if (CloseRequests != other.CloseRequests) return false;
      if (Error != other.Error) return false;
      if (SubCloseRequests != other.SubCloseRequests) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubPrefix.Length != 0) hash ^= PubPrefix.GetHashCode();
      if (SubRequests.Length != 0) hash ^= SubRequests.GetHashCode();
      if (UnsubRequests.Length != 0) hash ^= UnsubRequests.GetHashCode();
      if (CloseRequests.Length != 0) hash ^= CloseRequests.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (SubCloseRequests.Length != 0) hash ^= SubCloseRequests.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubPrefix);
      }
      if (SubRequests.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubRequests);
      }
      if (UnsubRequests.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UnsubRequests);
      }
      if (CloseRequests.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CloseRequests);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Error);
      }
      if (SubCloseRequests.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SubCloseRequests);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubPrefix);
      }
      if (SubRequests.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubRequests);
      }
      if (UnsubRequests.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnsubRequests);
      }
      if (CloseRequests.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloseRequests);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (SubCloseRequests.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubCloseRequests);
      }
      if (PublicKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectResponse other) {
      if (other == null) {
        return;
      }
      if (other.PubPrefix.Length != 0) {
        PubPrefix = other.PubPrefix;
      }
      if (other.SubRequests.Length != 0) {
        SubRequests = other.SubRequests;
      }
      if (other.UnsubRequests.Length != 0) {
        UnsubRequests = other.UnsubRequests;
      }
      if (other.CloseRequests.Length != 0) {
        CloseRequests = other.CloseRequests;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.SubCloseRequests.Length != 0) {
        SubCloseRequests = other.SubCloseRequests;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubPrefix = input.ReadString();
            break;
          }
          case 18: {
            SubRequests = input.ReadString();
            break;
          }
          case 26: {
            UnsubRequests = input.ReadString();
            break;
          }
          case 34: {
            CloseRequests = input.ReadString();
            break;
          }
          case 42: {
            Error = input.ReadString();
            break;
          }
          case 50: {
            SubCloseRequests = input.ReadString();
            break;
          }
          case 802: {
            PublicKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Protocol for a client to subscribe
  /// </summary>
  public sealed partial class SubscriptionRequest : pb::IMessage<SubscriptionRequest> {
    private static readonly pb::MessageParser<SubscriptionRequest> _parser = new pb::MessageParser<SubscriptionRequest>(() => new SubscriptionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest(SubscriptionRequest other) : this() {
      clientID_ = other.clientID_;
      subject_ = other.subject_;
      qGroup_ = other.qGroup_;
      inbox_ = other.inbox_;
      maxInFlight_ = other.maxInFlight_;
      ackWaitInSecs_ = other.ackWaitInSecs_;
      durableName_ = other.durableName_;
      startPosition_ = other.startPosition_;
      startSequence_ = other.startSequence_;
      startTimeDelta_ = other.startTimeDelta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest Clone() {
      return new SubscriptionRequest(this);
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 1;
    private string clientID_ = "";
    /// <summary>
    /// ClientID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 2;
    private string subject_ = "";
    /// <summary>
    /// Formal subject to subscribe to, e.g. foo.bar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qGroup" field.</summary>
    public const int QGroupFieldNumber = 3;
    private string qGroup_ = "";
    /// <summary>
    /// Optional queue group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QGroup {
      get { return qGroup_; }
      set {
        qGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inbox" field.</summary>
    public const int InboxFieldNumber = 4;
    private string inbox_ = "";
    /// <summary>
    /// Inbox subject to deliver messages on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Inbox {
      get { return inbox_; }
      set {
        inbox_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxInFlight" field.</summary>
    public const int MaxInFlightFieldNumber = 5;
    private int maxInFlight_;
    /// <summary>
    /// Maximum inflight messages without an ack allowed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxInFlight {
      get { return maxInFlight_; }
      set {
        maxInFlight_ = value;
      }
    }

    /// <summary>Field number for the "ackWaitInSecs" field.</summary>
    public const int AckWaitInSecsFieldNumber = 6;
    private int ackWaitInSecs_;
    /// <summary>
    /// Timeout for receiving an ack from the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AckWaitInSecs {
      get { return ackWaitInSecs_; }
      set {
        ackWaitInSecs_ = value;
      }
    }

    /// <summary>Field number for the "durableName" field.</summary>
    public const int DurableNameFieldNumber = 7;
    private string durableName_ = "";
    /// <summary>
    /// Optional durable name which survives client restarts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DurableName {
      get { return durableName_; }
      set {
        durableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startPosition" field.</summary>
    public const int StartPositionFieldNumber = 10;
    private global::STAN.Client.StartPosition startPosition_ = 0;
    /// <summary>
    /// Start position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::STAN.Client.StartPosition StartPosition {
      get { return startPosition_; }
      set {
        startPosition_ = value;
      }
    }

    /// <summary>Field number for the "startSequence" field.</summary>
    public const int StartSequenceFieldNumber = 11;
    private ulong startSequence_;
    /// <summary>
    /// Optional start sequence number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartSequence {
      get { return startSequence_; }
      set {
        startSequence_ = value;
      }
    }

    /// <summary>Field number for the "startTimeDelta" field.</summary>
    public const int StartTimeDeltaFieldNumber = 12;
    private long startTimeDelta_;
    /// <summary>
    /// Optional start time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimeDelta {
      get { return startTimeDelta_; }
      set {
        startTimeDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientID != other.ClientID) return false;
      if (Subject != other.Subject) return false;
      if (QGroup != other.QGroup) return false;
      if (Inbox != other.Inbox) return false;
      if (MaxInFlight != other.MaxInFlight) return false;
      if (AckWaitInSecs != other.AckWaitInSecs) return false;
      if (DurableName != other.DurableName) return false;
      if (StartPosition != other.StartPosition) return false;
      if (StartSequence != other.StartSequence) return false;
      if (StartTimeDelta != other.StartTimeDelta) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientID.Length != 0) hash ^= ClientID.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (QGroup.Length != 0) hash ^= QGroup.GetHashCode();
      if (Inbox.Length != 0) hash ^= Inbox.GetHashCode();
      if (MaxInFlight != 0) hash ^= MaxInFlight.GetHashCode();
      if (AckWaitInSecs != 0) hash ^= AckWaitInSecs.GetHashCode();
      if (DurableName.Length != 0) hash ^= DurableName.GetHashCode();
      if (StartPosition != 0) hash ^= StartPosition.GetHashCode();
      if (StartSequence != 0UL) hash ^= StartSequence.GetHashCode();
      if (StartTimeDelta != 0L) hash ^= StartTimeDelta.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientID);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (QGroup.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QGroup);
      }
      if (Inbox.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Inbox);
      }
      if (MaxInFlight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxInFlight);
      }
      if (AckWaitInSecs != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AckWaitInSecs);
      }
      if (DurableName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DurableName);
      }
      if (StartPosition != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) StartPosition);
      }
      if (StartSequence != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(StartSequence);
      }
      if (StartTimeDelta != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(StartTimeDelta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (QGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QGroup);
      }
      if (Inbox.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Inbox);
      }
      if (MaxInFlight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxInFlight);
      }
      if (AckWaitInSecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckWaitInSecs);
      }
      if (DurableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DurableName);
      }
      if (StartPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StartPosition);
      }
      if (StartSequence != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartSequence);
      }
      if (StartTimeDelta != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeDelta);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientID.Length != 0) {
        ClientID = other.ClientID;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.QGroup.Length != 0) {
        QGroup = other.QGroup;
      }
      if (other.Inbox.Length != 0) {
        Inbox = other.Inbox;
      }
      if (other.MaxInFlight != 0) {
        MaxInFlight = other.MaxInFlight;
      }
      if (other.AckWaitInSecs != 0) {
        AckWaitInSecs = other.AckWaitInSecs;
      }
      if (other.DurableName.Length != 0) {
        DurableName = other.DurableName;
      }
      if (other.StartPosition != 0) {
        StartPosition = other.StartPosition;
      }
      if (other.StartSequence != 0UL) {
        StartSequence = other.StartSequence;
      }
      if (other.StartTimeDelta != 0L) {
        StartTimeDelta = other.StartTimeDelta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientID = input.ReadString();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            QGroup = input.ReadString();
            break;
          }
          case 34: {
            Inbox = input.ReadString();
            break;
          }
          case 40: {
            MaxInFlight = input.ReadInt32();
            break;
          }
          case 48: {
            AckWaitInSecs = input.ReadInt32();
            break;
          }
          case 58: {
            DurableName = input.ReadString();
            break;
          }
          case 80: {
            startPosition_ = (global::STAN.Client.StartPosition) input.ReadEnum();
            break;
          }
          case 88: {
            StartSequence = input.ReadUInt64();
            break;
          }
          case 96: {
            StartTimeDelta = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for SubscriptionRequest and UnsubscribeRequests
  /// </summary>
  public sealed partial class SubscriptionResponse : pb::IMessage<SubscriptionResponse> {
    private static readonly pb::MessageParser<SubscriptionResponse> _parser = new pb::MessageParser<SubscriptionResponse>(() => new SubscriptionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse(SubscriptionResponse other) : this() {
      ackInbox_ = other.ackInbox_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse Clone() {
      return new SubscriptionResponse(this);
    }

    /// <summary>Field number for the "ackInbox" field.</summary>
    public const int AckInboxFieldNumber = 2;
    private string ackInbox_ = "";
    /// <summary>
    /// ackInbox for sending acks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AckInbox {
      get { return ackInbox_; }
      set {
        ackInbox_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    /// err string, empty/omitted if no error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AckInbox != other.AckInbox) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AckInbox.Length != 0) hash ^= AckInbox.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AckInbox.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AckInbox);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AckInbox.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AckInbox);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionResponse other) {
      if (other == null) {
        return;
      }
      if (other.AckInbox.Length != 0) {
        AckInbox = other.AckInbox;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            AckInbox = input.ReadString();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Protocol for a clients to unsubscribe. Will return a SubscriptionResponse
  /// </summary>
  public sealed partial class UnsubscribeRequest : pb::IMessage<UnsubscribeRequest> {
    private static readonly pb::MessageParser<UnsubscribeRequest> _parser = new pb::MessageParser<UnsubscribeRequest>(() => new UnsubscribeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnsubscribeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsubscribeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsubscribeRequest(UnsubscribeRequest other) : this() {
      clientID_ = other.clientID_;
      subject_ = other.subject_;
      inbox_ = other.inbox_;
      durableName_ = other.durableName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsubscribeRequest Clone() {
      return new UnsubscribeRequest(this);
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 1;
    private string clientID_ = "";
    /// <summary>
    /// ClientID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 2;
    private string subject_ = "";
    /// <summary>
    /// subject for the subscription
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inbox" field.</summary>
    public const int InboxFieldNumber = 3;
    private string inbox_ = "";
    /// <summary>
    /// Inbox subject to identify subscription
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Inbox {
      get { return inbox_; }
      set {
        inbox_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "durableName" field.</summary>
    public const int DurableNameFieldNumber = 4;
    private string durableName_ = "";
    /// <summary>
    /// Optional durable name which survives client restarts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DurableName {
      get { return durableName_; }
      set {
        durableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnsubscribeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnsubscribeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientID != other.ClientID) return false;
      if (Subject != other.Subject) return false;
      if (Inbox != other.Inbox) return false;
      if (DurableName != other.DurableName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientID.Length != 0) hash ^= ClientID.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Inbox.Length != 0) hash ^= Inbox.GetHashCode();
      if (DurableName.Length != 0) hash ^= DurableName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientID);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (Inbox.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Inbox);
      }
      if (DurableName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DurableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Inbox.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Inbox);
      }
      if (DurableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DurableName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnsubscribeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientID.Length != 0) {
        ClientID = other.ClientID;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Inbox.Length != 0) {
        Inbox = other.Inbox;
      }
      if (other.DurableName.Length != 0) {
        DurableName = other.DurableName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientID = input.ReadString();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            Inbox = input.ReadString();
            break;
          }
          case 34: {
            DurableName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Protocol for a client to close a connection
  /// </summary>
  public sealed partial class CloseRequest : pb::IMessage<CloseRequest> {
    private static readonly pb::MessageParser<CloseRequest> _parser = new pb::MessageParser<CloseRequest>(() => new CloseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRequest(CloseRequest other) : this() {
      clientID_ = other.clientID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseRequest Clone() {
      return new CloseRequest(this);
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 1;
    private string clientID_ = "";
    /// <summary>
    /// Client name provided to Connect() requests
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientID != other.ClientID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientID.Length != 0) hash ^= ClientID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientID.Length != 0) {
        ClientID = other.ClientID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for CloseRequest
  /// </summary>
  public sealed partial class CloseResponse : pb::IMessage<CloseResponse> {
    private static readonly pb::MessageParser<CloseResponse> _parser = new pb::MessageParser<CloseResponse>(() => new CloseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::STAN.Client.ProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseResponse(CloseResponse other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseResponse Clone() {
      return new CloseResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    /// <summary>
    /// err string, empty/omitted if no error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseResponse other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
