name: $(Semver)

variables:
  BuildRev: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  ${{ if startsWith( variables['Build.SourceBranch'], 'refs/tags' ) }}:
    SemVer: $[ variables['Build.SourceBranchName'] ]
  ${{ if not( startsWith( variables['Build.SourceBranch'], 'refs/tags' )) }}:
    SemVer: $[format('{0:yyyy}.{0:MM}.{0:dd}-pre{1}', pipeline.startTime, variables.BuildRev)]
  InfoVer: $(Build.SourceVersion)

trigger:
  batch: true
  branches:
    include:
    - master
    - refs/tags/*

pr:
  autoCancel: true
  branches:
    include:
    - master

pool:
  vmImage: windows-2019

stages:
- stage: Build
  jobs:
  - job: BuildArtifacts
    displayName: 'Builds, tests & produces artifacts'
    timeoutInMinutes: 12
    cancelTimeoutInMinutes: 5
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: build
        projects: 'src/*.sln'
        arguments: '-c $(BuildConfiguration) --no-incremental --nologo -p:TreatWarningsAsErrors=true -p:Version=$(SemVer) -p:InformationalVersion=$(InfoVer)'
  
    - task: DotNetCoreCLI@2
      displayName: 'UnitTests .NetCoreApp2.2'
      inputs:
        command: test
        projects: 'src/Tests/**/UnitTests.csproj'
        arguments: '-c $(BuildConfiguration) -f netcoreapp2.2 --no-build'
        testRunTitle: 'UnitTests .NetCoreApp2.2'
  
    - task: DotNetCoreCLI@2
      displayName: 'UnitTests .Net4.5.2'
      inputs:
        command: test
        projects: 'src/Tests/**/UnitTests.csproj'
        arguments: '-c $(BuildConfiguration) -f net452 --no-build'
        testRunTitle: 'UnitTests .Net4.5.2'

    - task: PowerShell@2
      displayName: 'Download latest Win64 NATS-Server'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Getting latest release $releaseUri"
          $releaseUri = "https://api.github.com/repos/nats-io/nats-server/releases/latest"
          $response = Invoke-RestMethod -Uri $releaseUri -UseBasicParsing
  
          $win64asset = $response.assets.where({$_.name -like 'nats-server-*-windows-amd64.zip'})
          $assetUrl = $win64asset.browser_download_url
          $name = $win64asset.name
          $outputFile = "$(Agent.TempDirectory)\nats-server\$name"
  
          Write-Host "Downloading asset $name to $outputFile from $assetUrl"
          New-Item -ItemType Directory -Force -Path $(Agent.TempDirectory)\nats-server
          (New-Object System.Net.WebClient).DownloadFile($assetUrl, $outputFile)
  
    - task: PowerShell@2
      displayName: 'Download latest Win64 NATS-Streaming-Server'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Getting latest release $releaseUri"
          $releaseUri = "https://api.github.com/repos/nats-io/nats-streaming-server/releases/latest"
          $response = Invoke-RestMethod -Uri $releaseUri -UseBasicParsing
  
          $win64asset = $response.assets.where({$_.name -like 'nats-streaming-server-*-windows-amd64.zip'})
          $assetUrl = $win64asset.browser_download_url
          $name = $win64asset.name
          $outputFile = "$(Agent.TempDirectory)\nats-streaming-server\$name"
  
          Write-Host "Downloading asset $name to $outputFile from $assetUrl"
          New-Item -ItemType Directory -Force -Path $(Agent.TempDirectory)\nats-streaming-server
          (New-Object System.Net.WebClient).DownloadFile($assetUrl, $outputFile)

    - task: ExtractFiles@1
      displayName: 'Extract NATS-Server files '
      inputs:
        archiveFilePatterns: '$(Agent.TempDirectory)\nats-server\nats-server*.zip'
        destinationFolder: '$(Agent.TempDirectory)\nats-server'
        cleanDestinationFolder: false
    
    - task: ExtractFiles@1
      displayName: 'Extract NATS-Streaming-Server files '
      inputs:
        archiveFilePatterns: '$(Agent.TempDirectory)\nats-streaming-server\nats-streaming-server*.zip'
        destinationFolder: '$(Agent.TempDirectory)\nats-streaming-server'
        cleanDestinationFolder: false

    - task: PowerShell@2
      displayName: 'Include NATS-Server in path'
      inputs:
        targetType: 'inline'
        script: |
          $natsServerDir = Get-ChildItem -Directory -Path "$(Agent.TempDirectory)\nats-server\nats-server-*" | Select -Expand FullName
          Write-Host "Found nats-server path: $natsServerDir"
          Write-Host "##vso[task.setvariable variable=PATH;]${env:PATH};$natsServerDir"
  
    - task: PowerShell@2
      displayName: 'Include NATS--Streaming-Server in path'
      inputs:
        targetType: 'inline'
        script: |
          $natsStreamingServerDir = Get-ChildItem -Directory -Path "$(Agent.TempDirectory)\nats-streaming-server\nats-streaming-server-*" | Select -Expand FullName
          Write-Host "Found nats-streaming-server path: $natsStreamingServerDir"
          Write-Host "##vso[task.setvariable variable=PATH;]${env:PATH};$natsStreamingServerDir"
  
    - task: DotNetCoreCLI@2
      displayName: 'IntegrationTests .NetCoreApp2.2'
      inputs:
        command: test
        projects: 'src/Tests/**/IntegrationTests.csproj'
        arguments: '-c $(BuildConfiguration) -f netcoreapp2.2 --no-build'
        testRunTitle: 'IntegrationTests .NetCoreApp2.2'
  
    - task: DotNetCoreCLI@2
      displayName: 'IntegrationTests .Net4.5.2'
      inputs:
        command: test
        projects: 'src/Tests/**/IntegrationTests.csproj'
        arguments: '-c $(BuildConfiguration) -f net452 --no-build'
        testRunTitle: 'IntegrationTests .Net4.5.2'
  
    - task: DotNetCoreCLI@2
      displayName: 'Pack Nupkg'
      inputs:
        command: custom
        custom: pack
        projects: 'src/*.sln'
        arguments: '-c $(BuildConfiguration) --no-build -o $(Build.ArtifactStagingDirectory) -p:Version=$(SemVer) -p:InformationalVersion=$(InfoVer)'
  
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifacts'
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
        artifact: Artifacts

- stage: Deploy
  condition: and (succeeded(), startsWith( variables['Build.SourceBranch'], 'refs/tags' ))
  dependsOn: Build
  jobs:
  - deployment: DeployArtifacts
    environment: 'Prod'
    displayName: 'Deploys artifacts'
    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 5
    strategy: 
      runOnce:
        deploy:
          steps:
          - checkout: none
          - task: NuGetCommand@2
            displayName: 'Push Nupkg to NuGet.Org'
            inputs:
              command: push
              nugetFeedType: external
              publishFeedCredentials: nuget_org_push_new_versions
              verbosityPush: Normal
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
